/*
 * main.cpp
 *
 *  Created on: Aug 20, 2014
 *      Author: dimalit
 */

#include <model_e3.pb.h>
using namespace pb;

E3Config pconfig;
E3PetscSolverConfig sconfig;
E3State state;

#include <petscts.h>
#include <mpi.h>
#include <unistd.h>

int rank;
int size;


double E_e, phi_e;
double *array_a0;

void vec_to_a0(Vec v);
void vec_to_state(Vec v, E3State*);
void state_to_vec(Vec v);
PetscErrorCode RHSFunction(TS,PetscReal,Vec,Vec,void*);

// TMP
//#include <fcntl.h>

int main(int argc, char** argv){

//	int go = 0;
//	while(go==0){
//		sleep(1);
//	}

//	close(0);
//	open("../ode-env/all.tmp", O_RDONLY);

	PetscErrorCode ierr;
	ierr = PetscInitialize(&argc, &argv, (char*)0, (char*)0);CHKERRQ(ierr);

	ierr = MPI_Comm_rank(PETSC_COMM_WORLD, &rank);CHKERRQ(ierr);
	ierr = MPI_Comm_size(PETSC_COMM_WORLD, &size);CHKERRQ(ierr);

	int max_steps; double max_time;

	char* buf_sconfig; int buf_sconfig_size;
	char* buf_pconfig; int buf_pconfig_size;

	if(rank==0){
		E3Model all;
		all.ParseFromFileDescriptor(0);

		max_steps = all.steps();
		max_time = all.time();

		sconfig.CopyFrom(all.sconfig());
		pconfig.CopyFrom(all.pconfig());
		state.CopyFrom(all.state());

		buf_sconfig_size = sconfig.ByteSize();
		buf_pconfig_size = pconfig.ByteSize();
	}

	MPI_Bcast(&buf_pconfig_size, 1, MPI_INT, 0, PETSC_COMM_WORLD);
	MPI_Bcast(&buf_sconfig_size, 1, MPI_INT, 0, PETSC_COMM_WORLD);
	buf_pconfig = new char[buf_pconfig_size];
	buf_sconfig = new char[buf_sconfig_size];

	if(rank == 0){
		sconfig.SerializeToArray(buf_sconfig, buf_sconfig_size);
		pconfig.SerializeToArray(buf_pconfig, buf_pconfig_size);
	}

	MPI_Bcast(buf_sconfig, buf_sconfig_size, MPI_BYTE, 0, PETSC_COMM_WORLD);
	MPI_Bcast(buf_pconfig, buf_pconfig_size, MPI_BYTE, 0, PETSC_COMM_WORLD);

	if(rank != 0){
		sconfig.ParseFromArray(buf_sconfig, sconfig.ByteSize());
		pconfig.ParseFromArray(buf_pconfig, pconfig.ByteSize());
	}

	delete[] buf_sconfig;
	delete[] buf_pconfig;

	MPI_Bcast(&max_steps, 1, MPI_INT, 0, PETSC_COMM_WORLD);
	MPI_Bcast(&max_time, 1, MPI_DOUBLE, 0, PETSC_COMM_WORLD);

	Vec u;
	VecCreate(PETSC_COMM_WORLD, &u);
	VecSetType(u, VECMPI);
	int part = pconfig.m() / size;
	if(rank == 0){
		VecSetSizes(u, 2 + part*3, PETSC_DECIDE);
		array_a0 = new double[part*3];
	}
	else if(rank == size-1){
		int reminder = pconfig.m() % part;
		VecSetSizes(u, 3*(part+reminder), PETSC_DECIDE);
		array_a0 = new double[(part+reminder)*3];
	}
	else{
		VecSetSizes(u, part*3, PETSC_DECIDE);
		array_a0 = new double[part*3];
	}
	state_to_vec(u);
	vec_to_a0(u);
//!!! call here!

	E3Solution sol;
	for(int i=0; i<state.particles_size(); i++){
		sol.mutable_state()->add_particles();
		sol.mutable_d_state()->add_particles();
	}

	Vec res;
	TSGetSolution(ts, &res);
	vec_to_state(res, sol.mutable_state());

	Vec d_res;
	VecDuplicate(res, &d_res);			// use same dimensions
	PetscReal res_time; TSGetTime(ts, &res_time);
	RHSFunction(ts, res_time, res, d_res, NULL);
	vec_to_state(d_res, sol.mutable_d_state());
	VecDestroy(&d_res);

	if(rank == 0){
		// 1 write time and steps
		PetscInt res_steps; TSGetTimeStepNumber(ts, &res_steps);
		write(1, &res_steps, sizeof(res_steps));
		write(1, &res_time, sizeof(res_time));

		// 2 write state
		sol.SerializeToFileDescriptor(1);
	}

	ierr = PetscFinalize();CHKERRQ(ierr);
	return 0;
}

void vec_to_a0(Vec v){
	double* arr;
	VecGetArray(v, &arr);

	int localsize;
	VecGetLocalSize(v, &localsize);

	int shift = 0;
	if(rank == 0)
		shift = 2;

	for(int i=0; i<localsize-shift; i++){
		array_a0[i] = arr[i+shift];
	}

	VecRestoreArray(v, &arr);
}

void state_to_vec(Vec v){
	int vecsize;
	VecGetSize(v, &vecsize);
	assert(vecsize == pconfig.m()*3+2);

	// 1 write E and phi
	VecAssemblyBegin(v);
	if(rank == 0){
		E_e = state.e();
		phi_e = state.phi();
		VecSetValue(v, 0, E_e, INSERT_VALUES);
		VecSetValue(v, 1, phi_e, INSERT_VALUES);
	}
	VecAssemblyEnd(v);

	MPI_Bcast(&E_e, 1, MPI_DOUBLE, 0, PETSC_COMM_WORLD);
	MPI_Bcast(&phi_e, 1, MPI_DOUBLE, 0, PETSC_COMM_WORLD);

	// 2 scatter data!
	double *arr;
	VecGetArray(v, &arr);

	if(rank == 0){
		int begin = pconfig.m();
		for(int r = size - 1; r>=0; r--){
			int part = pconfig.m() / size;
			if(r == size-1)
				part = pconfig.m() % part + part;

			begin -= part;

			// shift by two in case of r==0
			int shift = 0;
			if(r==0)
				shift = 2;

			for(int i=0; i<part; i++){
				E3State::Particles p = state.particles(begin+i);
				arr[shift + i*3+0] = p.eta();
				arr[shift + i*3+1] = p.a();
				arr[shift + i*3+2] = p.ksi();
			}

			if(r!=0)
				MPI_Send(arr, part*3, MPI_DOUBLE, r, 0, PETSC_COMM_WORLD);

		}// for
	}// if rank == 0
	else{
		int part = pconfig.m() / size;
		if(rank == size-1)
			part = pconfig.m() % part + part;
		MPI_Status s;
		assert(MPI_SUCCESS == MPI_Recv(arr, part, MPI_DOUBLE, 0, 0, PETSC_COMM_WORLD, &s));
	}// if rank != 0

	VecRestoreArray(v, &arr);
}

void vec_to_state(Vec v, E3State* state){
	double *arr;
	VecGetArray(v, &arr);

	if(rank == 0){

		state->set_e(arr[0]);
		state->set_phi(arr[1]);

		int begin = 0;

		for(int r = 0; r<size; r++){
			int part = pconfig.m() / size;
			if(r == size-1)
				part = pconfig.m() % part + part;

			MPI_Status s;
			if(r!=0)
				assert(MPI_SUCCESS == MPI_Recv(arr, part*3, MPI_DOUBLE, r, 0, PETSC_COMM_WORLD, &s));

			for(int i=0; i<part; i++){
				E3State::Particles* p = state->mutable_particles(begin+i);
				p->set_eta(arr[2+i*3+0]);
				p->set_a(arr[2+i*3+1]);
				p->set_ksi(arr[2+i*3+2]);
			}

			begin += part;

		}// for
	}// if rank == 0
	else{
		int part = pconfig.m() / size;
		if(rank == size-1)
			part = pconfig.m() % part + part;
		assert(MPI_SUCCESS == MPI_Send(arr, part, MPI_DOUBLE, 0, 0, PETSC_COMM_WORLD));
	}// if rank != 0

	VecRestoreArray(v, &arr);
}

// compute BesselJ_n_'(x)
double Jn_(double x){
	double n = pconfig.n();
	return n * (sin(x) - 2*j1(x)) / x;
}
